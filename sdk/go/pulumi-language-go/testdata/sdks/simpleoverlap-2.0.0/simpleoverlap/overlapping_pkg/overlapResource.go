// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package overlapping_pkg

import (
	"context"
	"reflect"

	"errors"
	"example.com/pulumi-simple/sdk/go/v2/simple"
	"example.com/pulumi-simpleoverlap/sdk/go/v2/simpleoverlap/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OverlapResource struct {
	pulumi.CustomResourceState

	Out simple.ResourceOutput `pulumi:"out"`
}

// NewOverlapResource registers a new resource with the given unique name, arguments, and options.
func NewOverlapResource(ctx *pulumi.Context,
	name string, args *OverlapResourceArgs, opts ...pulumi.ResourceOption) (*OverlapResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OverlapResource
	err := ctx.RegisterResource("simpleoverlap:overlapping_pkg:OverlapResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOverlapResource gets an existing OverlapResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOverlapResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OverlapResourceState, opts ...pulumi.ResourceOption) (*OverlapResource, error) {
	var resource OverlapResource
	err := ctx.ReadResource("simpleoverlap:overlapping_pkg:OverlapResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OverlapResource resources.
type overlapResourceState struct {
}

type OverlapResourceState struct {
}

func (OverlapResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*overlapResourceState)(nil)).Elem()
}

type overlapResourceArgs struct {
	Value bool `pulumi:"value"`
}

// The set of arguments for constructing a OverlapResource resource.
type OverlapResourceArgs struct {
	Value pulumi.BoolInput
}

func (OverlapResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*overlapResourceArgs)(nil)).Elem()
}

type OverlapResourceInput interface {
	pulumi.Input

	ToOverlapResourceOutput() OverlapResourceOutput
	ToOverlapResourceOutputWithContext(ctx context.Context) OverlapResourceOutput
}

func (*OverlapResource) ElementType() reflect.Type {
	return reflect.TypeOf((**OverlapResource)(nil)).Elem()
}

func (i *OverlapResource) ToOverlapResourceOutput() OverlapResourceOutput {
	return i.ToOverlapResourceOutputWithContext(context.Background())
}

func (i *OverlapResource) ToOverlapResourceOutputWithContext(ctx context.Context) OverlapResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverlapResourceOutput)
}

type OverlapResourceOutput struct{ *pulumi.OutputState }

func (OverlapResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OverlapResource)(nil)).Elem()
}

func (o OverlapResourceOutput) ToOverlapResourceOutput() OverlapResourceOutput {
	return o
}

func (o OverlapResourceOutput) ToOverlapResourceOutputWithContext(ctx context.Context) OverlapResourceOutput {
	return o
}

func (o OverlapResourceOutput) Out() simple.ResourceOutput {
	return o.ApplyT(func(v *OverlapResource) simple.ResourceOutput { return v.Out }).(simple.ResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OverlapResourceInput)(nil)).Elem(), &OverlapResource{})
	pulumi.RegisterOutputType(OverlapResourceOutput{})
}
