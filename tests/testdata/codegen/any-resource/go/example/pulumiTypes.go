// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"any-resource/example/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type TypeWithResources struct {
	PlainResource pulumi.Resource `pulumi:"plainResource"`
	Resource      pulumi.Resource `pulumi:"resource"`
}

// TypeWithResourcesInput is an input type that accepts TypeWithResourcesArgs and TypeWithResourcesOutput values.
// You can construct a concrete instance of `TypeWithResourcesInput` via:
//
//	TypeWithResourcesArgs{...}
type TypeWithResourcesInput interface {
	pulumi.Input

	ToTypeWithResourcesOutput() TypeWithResourcesOutput
	ToTypeWithResourcesOutputWithContext(context.Context) TypeWithResourcesOutput
}

type TypeWithResourcesArgs struct {
	PlainResource pulumi.Resource      `pulumi:"plainResource"`
	Resource      pulumi.ResourceInput `pulumi:"resource"`
}

func (TypeWithResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeWithResources)(nil)).Elem()
}

func (i TypeWithResourcesArgs) ToTypeWithResourcesOutput() TypeWithResourcesOutput {
	return i.ToTypeWithResourcesOutputWithContext(context.Background())
}

func (i TypeWithResourcesArgs) ToTypeWithResourcesOutputWithContext(ctx context.Context) TypeWithResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeWithResourcesOutput)
}

func (i TypeWithResourcesArgs) ToTypeWithResourcesPtrOutput() TypeWithResourcesPtrOutput {
	return i.ToTypeWithResourcesPtrOutputWithContext(context.Background())
}

func (i TypeWithResourcesArgs) ToTypeWithResourcesPtrOutputWithContext(ctx context.Context) TypeWithResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeWithResourcesOutput).ToTypeWithResourcesPtrOutputWithContext(ctx)
}

// TypeWithResourcesPtrInput is an input type that accepts TypeWithResourcesArgs, TypeWithResourcesPtr and TypeWithResourcesPtrOutput values.
// You can construct a concrete instance of `TypeWithResourcesPtrInput` via:
//
//	        TypeWithResourcesArgs{...}
//
//	or:
//
//	        nil
type TypeWithResourcesPtrInput interface {
	pulumi.Input

	ToTypeWithResourcesPtrOutput() TypeWithResourcesPtrOutput
	ToTypeWithResourcesPtrOutputWithContext(context.Context) TypeWithResourcesPtrOutput
}

type typeWithResourcesPtrType TypeWithResourcesArgs

func TypeWithResourcesPtr(v *TypeWithResourcesArgs) TypeWithResourcesPtrInput {
	return (*typeWithResourcesPtrType)(v)
}

func (*typeWithResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TypeWithResources)(nil)).Elem()
}

func (i *typeWithResourcesPtrType) ToTypeWithResourcesPtrOutput() TypeWithResourcesPtrOutput {
	return i.ToTypeWithResourcesPtrOutputWithContext(context.Background())
}

func (i *typeWithResourcesPtrType) ToTypeWithResourcesPtrOutputWithContext(ctx context.Context) TypeWithResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeWithResourcesPtrOutput)
}

type TypeWithResourcesOutput struct{ *pulumi.OutputState }

func (TypeWithResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeWithResources)(nil)).Elem()
}

func (o TypeWithResourcesOutput) ToTypeWithResourcesOutput() TypeWithResourcesOutput {
	return o
}

func (o TypeWithResourcesOutput) ToTypeWithResourcesOutputWithContext(ctx context.Context) TypeWithResourcesOutput {
	return o
}

func (o TypeWithResourcesOutput) ToTypeWithResourcesPtrOutput() TypeWithResourcesPtrOutput {
	return o.ToTypeWithResourcesPtrOutputWithContext(context.Background())
}

func (o TypeWithResourcesOutput) ToTypeWithResourcesPtrOutputWithContext(ctx context.Context) TypeWithResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TypeWithResources) *TypeWithResources {
		return &v
	}).(TypeWithResourcesPtrOutput)
}

func (o TypeWithResourcesOutput) PlainResource() pulumi.ResourceOutput {
	return o.ApplyT(func(v TypeWithResources) pulumi.Resource { return v.PlainResource }).(pulumi.ResourceOutput)
}

func (o TypeWithResourcesOutput) Resource() pulumi.ResourceOutput {
	return o.ApplyT(func(v TypeWithResources) pulumi.Resource { return v.Resource }).(pulumi.ResourceOutput)
}

type TypeWithResourcesPtrOutput struct{ *pulumi.OutputState }

func (TypeWithResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypeWithResources)(nil)).Elem()
}

func (o TypeWithResourcesPtrOutput) ToTypeWithResourcesPtrOutput() TypeWithResourcesPtrOutput {
	return o
}

func (o TypeWithResourcesPtrOutput) ToTypeWithResourcesPtrOutputWithContext(ctx context.Context) TypeWithResourcesPtrOutput {
	return o
}

func (o TypeWithResourcesPtrOutput) Elem() TypeWithResourcesOutput {
	return o.ApplyT(func(v *TypeWithResources) TypeWithResources {
		if v != nil {
			return *v
		}
		var ret TypeWithResources
		return ret
	}).(TypeWithResourcesOutput)
}

func (o TypeWithResourcesPtrOutput) PlainResource() pulumi.ResourceOutput {
	return o.ApplyT(func(v *TypeWithResources) pulumi.Resource {
		if v == nil {
			return nil
		}
		return v.PlainResource
	}).(pulumi.ResourceOutput)
}

func (o TypeWithResourcesPtrOutput) Resource() pulumi.ResourceOutput {
	return o.ApplyT(func(v *TypeWithResources) pulumi.Resource {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.ResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TypeWithResourcesInput)(nil)).Elem(), TypeWithResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypeWithResourcesPtrInput)(nil)).Elem(), TypeWithResourcesArgs{})
	pulumi.RegisterOutputType(TypeWithResourcesOutput{})
	pulumi.RegisterOutputType(TypeWithResourcesPtrOutput{})
}
