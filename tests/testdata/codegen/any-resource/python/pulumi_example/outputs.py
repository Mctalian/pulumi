# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'TypeWithResources',
]

@pulumi.output_type
class TypeWithResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "plainResource":
            suggest = "plain_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TypeWithResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TypeWithResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TypeWithResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource: pulumi.Resource,
                 plain_resource: Optional[pulumi.Resource] = None):
        pulumi.set(__self__, "resource", resource)
        if plain_resource is not None:
            pulumi.set(__self__, "plain_resource", plain_resource)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Resource:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="plainResource")
    def plain_resource(self) -> Optional[pulumi.Resource]:
        return pulumi.get(self, "plain_resource")


