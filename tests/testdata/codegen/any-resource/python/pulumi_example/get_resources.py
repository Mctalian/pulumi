# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetResourcesResult',
    'AwaitableGetResourcesResult',
    'get_resources',
    'get_resources_output',
]

@pulumi.output_type
class GetResourcesResult:
    def __init__(__self__, source=None):
        if source and not isinstance(source, pulumi.Resource):
            raise TypeError("Expected argument 'source' to be a pulumi.Resource")
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Resource:
        return pulumi.get(self, "source")


class AwaitableGetResourcesResult(GetResourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcesResult(
            source=self.source)


def get_resources(source: Optional[pulumi.Resource] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['source'] = source
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('example::GetResources', __args__, opts=opts, typ=GetResourcesResult).value

    return AwaitableGetResourcesResult(
        source=pulumi.get(__ret__, 'source'))


@_utilities.lift_output_func(get_resources)
def get_resources_output(source: Optional[pulumi.Input[pulumi.Resource]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetResourcesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
