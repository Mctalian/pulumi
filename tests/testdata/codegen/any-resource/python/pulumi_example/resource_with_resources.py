# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceWithResourcesArgs', 'ResourceWithResources']

@pulumi.input_type
class ResourceWithResourcesArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[pulumi.Resource],
                 nested: Optional[pulumi.Input['TypeWithResourcesArgs']] = None):
        """
        The set of arguments for constructing a ResourceWithResources resource.
        """
        pulumi.set(__self__, "source", source)
        if nested is not None:
            pulumi.set(__self__, "nested", nested)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[pulumi.Resource]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[pulumi.Resource]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def nested(self) -> Optional[pulumi.Input['TypeWithResourcesArgs']]:
        return pulumi.get(self, "nested")

    @nested.setter
    def nested(self, value: Optional[pulumi.Input['TypeWithResourcesArgs']]):
        pulumi.set(self, "nested", value)


class ResourceWithResources(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 nested: Optional[pulumi.Input[pulumi.InputType['TypeWithResourcesArgs']]] = None,
                 source: Optional[pulumi.Input[pulumi.Resource]] = None,
                 __props__=None):
        """
        Create a ResourceWithResources resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceWithResourcesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ResourceWithResources resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourceWithResourcesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceWithResourcesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 nested: Optional[pulumi.Input[pulumi.InputType['TypeWithResourcesArgs']]] = None,
                 source: Optional[pulumi.Input[pulumi.Resource]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceWithResourcesArgs.__new__(ResourceWithResourcesArgs)

            __props__.__dict__["nested"] = nested
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["resource"] = None
        super(ResourceWithResources, __self__).__init__(
            'example:index:ResourceWithResources',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ResourceWithResources':
        """
        Get an existing ResourceWithResources resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ResourceWithResourcesArgs.__new__(ResourceWithResourcesArgs)

        __props__.__dict__["nested"] = None
        __props__.__dict__["resource"] = None
        return ResourceWithResources(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def nested(self) -> pulumi.Output[Optional['outputs.TypeWithResources']]:
        return pulumi.get(self, "nested")

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Output[pulumi.Resource]:
        return pulumi.get(self, "resource")

