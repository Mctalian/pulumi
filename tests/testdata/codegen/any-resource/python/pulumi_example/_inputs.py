# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'TypeWithResourcesArgs',
]

@pulumi.input_type
class TypeWithResourcesArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[pulumi.Resource],
                 plain_resource: Optional[pulumi.Resource] = None):
        pulumi.set(__self__, "resource", resource)
        if plain_resource is not None:
            pulumi.set(__self__, "plain_resource", plain_resource)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[pulumi.Resource]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[pulumi.Resource]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="plainResource")
    def plain_resource(self) -> Optional[pulumi.Resource]:
        return pulumi.get(self, "plain_resource")

    @plain_resource.setter
    def plain_resource(self, value: Optional[pulumi.Resource]):
        pulumi.set(self, "plain_resource", value)


